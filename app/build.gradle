apply plugin: 'com.android.application'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    defaultConfig {
        applicationId "jp.empacket.iperf3"
        minSdkVersion 28
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cFlags "-I./src/ -I${projectDir}"
                cppFlags ""
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:23.4.0'
    testCompile 'junit:junit:4.12'
}



def grepFile(file, grepPattern) {
    def lines = []
    file.eachLine {
        line -> if (line.matches(grepPattern)) {
            lines << line
        }
    }
    return lines
}



task generate_iperf_version_string_h() {
    //
    // retrive some string constants from configure.ac and
    // write them to iperf_version.txt
    //

    def build_gradle_path   =   'app/build.gradle'
    def configure_ac_path   =   'app/iperf3/configure.ac'
    def version_string_h_path = 'app/version.h'

    //inputs.files  (configure_ac_path, build_gradle_path)
    //outputs.files (version_string_h_path)

    doLast {
        def lines
        def acinitLine
        def tokens

        // tokenize AC_INIT(...) to fetch version strings
        //
        // macro AC_INIT syntax is:
        //  AC_INIT (package, version, [bug-report],[tarname], [url])

        lines = grepFile(new File(configure_ac_path), ~/.*AC_INIT.*/)
        acinitLine = lines[0]
        tokens = acinitLine.split(/(\(|\)|,[ |\t]*)/)

        new File(version_string_h_path).withWriter { out ->

            out.println     "#define PACKAGE_NAME        \"${tokens[1]}\""
            out.println     "#define PACKAGE_VERSION     \"${tokens[2]}\""
            out.println     "#define IPERF_VERSION       \"${tokens[2]}\""
            out.println     "#define PACKAGE_STRING      \"${tokens[1]} ${tokens[2]}\""
            if (tokens.length > 3)
                out.println "#define PACKAGE_BUGREPORT   \"${tokens[3]}\""
            if (tokens.length > 4)
                out.println "#define PACKAGE_TARNAME     \"${tokens[4]}\""
            if (tokens.length > 5)
                out.println "#define PACKAGE_URL         \"${tokens[5]}\""
        }
    }
}

preBuild.dependsOn generate_iperf_version_string_h

